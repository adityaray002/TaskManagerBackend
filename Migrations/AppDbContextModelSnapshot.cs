// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_Manager_Backend.Data;

#nullable disable

namespace Task_Manager_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task_Manager_Backend.Data.Employee", b =>
                {
                    b.Property<int>("Emp_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Emp_Id"));

                    b.Property<string>("Employee_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Emp_Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.EmployeeTaskMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TasksTask_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("TasksTask_Id");

                    b.ToTable("EmployeeTaskMappings");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.Status", b =>
                {
                    b.Property<int>("Status_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Status_Id"));

                    b.Property<string>("Status_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Status_Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.Tag", b =>
                {
                    b.Property<int>("Tag_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tag_Id"));

                    b.Property<string>("Tag_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tag_Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.TaskStatusMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TasksTask_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TasksTask_Id");

                    b.ToTable("TaskStatusMappings");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.TaskTagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TasksTask_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TasksTask_Id");

                    b.ToTable("TaskTagMappings");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.Tasks", b =>
                {
                    b.Property<int>("Task_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Task_Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Task_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Task_Id");

                    b.ToTable("Taskss");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.EmployeeTaskMapping", b =>
                {
                    b.HasOne("Task_Manager_Backend.Data.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Backend.Data.Tasks", null)
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("TasksTask_Id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.TaskStatusMapping", b =>
                {
                    b.HasOne("Task_Manager_Backend.Data.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Backend.Data.Tasks", null)
                        .WithMany("TaskStatuses")
                        .HasForeignKey("TasksTask_Id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.TaskTagMapping", b =>
                {
                    b.HasOne("Task_Manager_Backend.Data.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Backend.Data.Tasks", null)
                        .WithMany("TaskTags")
                        .HasForeignKey("TasksTask_Id");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Task_Manager_Backend.Data.Tasks", b =>
                {
                    b.Navigation("EmployeeTasks");

                    b.Navigation("TaskStatuses");

                    b.Navigation("TaskTags");
                });
#pragma warning restore 612, 618
        }
    }
}
